z <- c(10,14,11)
#a
min(z)
max(z)
## The two functions shows the maximum and the minimum of z.
#b
lo <- min(z)
hi <- max(z)
s <- (z-lo)/(hi-lo)
s
#d
rescale(z)
#c
rescale = fucntion(x){
(x-min(x))/(max(x)-min(x))
}
#d
rescale(z)
#c
rescale = fucntion(x){
(x-min(x))/(max(x)-min(x))
}
#c
rescale = fucntion(x){
s = (x-min(x))/(max(x)-min(x))
s
}
#c
rescale = function(x){
s = (x-min(x))/(max(x)-min(x))
s
}
#d
rescale(z)
rescale(x)
x = c(1,10,100)
rescale(x)
rescale()
rescale(x)
#e
x = c(2,2,2)
rescale(x)
## It returns NA.
rescale = function(x){
if(length(unique(x)) == 1){
stop('All elements are equal!')
} else{
s = (x-min(x))/(max(x)-min(x))
s
}
}
rescale(x)
#f
data = matrix(rnorm(100,mean = 5, sd = 3),10,10)
#f
data = as.data.frame(matrix(rnorm(100,mean = 5, sd = 3),10,10))
View(data)
data$V1_scale = rescale(data$V1)
data
#g
rescale = function(x,a=0,b=1){
#h
rescale(x=c(1,2,3,4,10), a=2, b=4)
#g
rescale = function(x,a=0,b=1){
if(length(unique(x)) == 1){
stop('All elements are equal!')
} else{
s = (x-min(x))/(max(x)-min(x))*(b-a)+a
s
}
}
#h
rescale(x=c(1,2,3,4,10), a=2, b=4)
rescale(x=c(2,2,2,2), a=2, b=4)
setwd("~/Desktop/2021_winter_quarter/TS/Lecture 1")
# b
series = read.csv('f657ab9f9ecd5e33.csv')
attach(series)
pr<-PRICE[DATE==20170103]
vol<-c(1:20)*0
for (k in 1:20){
dipr<-diff(pr,lag=k)
vol1<-sum(dipr^2)/k
vol[k]<-sqrt(vol1*250) #annualized square root scale
}
plot(vol)
View(series)
unique(series$DATE)
dplyr::arrange(series$TIME_M)
library(dplyr)
# c
series %>% arrange(TIME_M)
# c
series_a = series %>% arrange(date, TIME_M)
# c
series_a = series %>% arrange(DATE, TIME_M)
View(series_a)
# c
series_a = series %>% arrange(DATE, desc(TIME_M))
View(series_a)
?separate
library(tidyr)
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '.')
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]')
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% arrange(T1)
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = as.Date(T1))
?Date
?date
?as.Date
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = as.Date(T1, '%h%m%s'))
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = as.Date(T1, 'hh:mm:ss'))
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = as.Date(T1, 'h:m:s'))
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = as.POSIXct(T1,format="%H:%M:%S"))
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = as.Date(as.POSIXct(T1,format="%H:%M:%S"), format = '%h:%m:%s'))
library(chron)
# c
series %>% separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>% mutate(T1 = chron(times = T1))
# c
series %>%
separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>%
mutate(T1 = chron(times = T1)) %>%
arrange(DATE, T1, T2)
# c
series_0 = series %>%
separate(col = TIME_M, into = c('T1', 'T2'), sep = '[.]') %>%
mutate(T1 = chron(times = T1)) %>%
arrange(DATE, T1, T2)
any(series$PRICE == series_0$PRICE)
