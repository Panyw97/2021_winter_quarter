z <- c(10,14,11)
#a
min(z)
max(z)
## The two functions shows the maximum and the minimum of z.
#b
lo <- min(z)
hi <- max(z)
s <- (z-lo)/(hi-lo)
s
#d
rescale(z)
#c
rescale = fucntion(x){
(x-min(x))/(max(x)-min(x))
}
#d
rescale(z)
#c
rescale = fucntion(x){
(x-min(x))/(max(x)-min(x))
}
#c
rescale = fucntion(x){
s = (x-min(x))/(max(x)-min(x))
s
}
#c
rescale = function(x){
s = (x-min(x))/(max(x)-min(x))
s
}
#d
rescale(z)
rescale(x)
x = c(1,10,100)
rescale(x)
rescale()
rescale(x)
#e
x = c(2,2,2)
rescale(x)
## It returns NA.
rescale = function(x){
if(length(unique(x)) == 1){
stop('All elements are equal!')
} else{
s = (x-min(x))/(max(x)-min(x))
s
}
}
rescale(x)
#f
data = matrix(rnorm(100,mean = 5, sd = 3),10,10)
#f
data = as.data.frame(matrix(rnorm(100,mean = 5, sd = 3),10,10))
View(data)
data$V1_scale = rescale(data$V1)
data
#g
rescale = function(x,a=0,b=1){
#h
rescale(x=c(1,2,3,4,10), a=2, b=4)
#g
rescale = function(x,a=0,b=1){
if(length(unique(x)) == 1){
stop('All elements are equal!')
} else{
s = (x-min(x))/(max(x)-min(x))*(b-a)+a
s
}
}
#h
rescale(x=c(1,2,3,4,10), a=2, b=4)
rescale(x=c(2,2,2,2), a=2, b=4)
4.5/(1+0.0004) + 4.5/(1+0.0179)**2 + 104.5/(1+0.0694)**3
104.5/(1+0.0694)**2
104.5/(1+0.0694)
library(tidyverse)
?arrange
?top_n
data = mpg
mpg
View(data)
mpg %>% top_n(2)
mpg %>% top_n(displ, 2)
mpg %>% top_n(vt = displ, 2)
mpg %>% top_n(wt = displ, 2)
mpg %>% top_n(wt = c(displ, hwy), 2)
mpg %>% first(10)
mpg %>% gggplot+
geom_boxplot(aes(x = displ))
mpg %>% ggplot+
geom_boxplot(aes(x = displ))
mpg %>% ggplot+
geom_boxplot(aes(x = displ))+
geom_boxplot(aes(x = hwy))
mpg %>% ggplot+
geom_boxplot(aes(y = displ))+
geom_boxplot(aes(x = hwy))
mpg %>% ggplot+
geom_boxplot(aes(y = displ))+
geom_boxplot(aes(y = hwy))
setwd("~/Desktop/2021_winter_quarter/Time Series Analysis/Lecture 3")
# Q2
price = read.csv('stock_prices_for_lecture_3.zip')
# Q2
aapl = read.csv('stock_prices_for_lecture_3/AAPL.csv')
amzn = read.csv('stock_prices_for_lecture_3/AMZN.csv')
dis = read.csv('stock_prices_for_lecture_3/DIS.csv')
ford = read.csv('stock_prices_for_lecture_3/FORD.csv')
gm = read.csv('stock_prices_for_lecture_3/GM.csv')
goog = read.csv('stock_prices_for_lecture_3/GOOG.csv')
View(aapl)
prices = log(cbind(aapl[,6],goog[,6],amzn[,6],gm[,6],ford[,6],dis[,6]))
var.labels = c("google","apple","amazon","gm","ford","disney")
colnames(prices) = var.labels
returns = apply(prices,2,diff)
Rpsel = returns[1:1000,]
Rtest = returns[1001:1259,]
plot(Rpsel[,2],Rpsel[,3],xlab="Apple",ylab="Amazon",main="scatterplot for returns")
ts.plot(Rpsel[,2]-0.4134798*Rpsel[,3],xlab="time index",ylab="residuals from regression",
main="residual time series")
ts.plot(cumsum(Rpsel[,2]-0.4134798*Rpsel[,3]),xlab="time index",ylab="integrated residuals",
main="time series of log(p_{Apple}) - 0.4134798*log(p_{Amazon})")
plot(cumsum(Rpsel[,2]-0.4134798*Rpsel[,3]),Rpsel[,2]-0.4134798*Rpsel[,3],
xlab= "log(p_{Apple}) - 0.4134798*log(p_{Amazon})",ylab="r_{Apple} - 0.4134798*r_{Amazon}")
par(mfrow = c(2,2))
plot(Rpsel[,2],Rpsel[,3],xlab="Apple",ylab="Amazon",main="scatterplot for returns")
ts.plot(Rpsel[,2]-0.4134798*Rpsel[,3],xlab="time index",ylab="residuals from regression",
main="residual time series")
ts.plot(cumsum(Rpsel[,2]-0.4134798*Rpsel[,3]),xlab="time index",ylab="integrated residuals",
main="time series of log(p_{Apple}) - 0.4134798*log(p_{Amazon})")
plot(cumsum(Rpsel[,2]-0.4134798*Rpsel[,3]),Rpsel[,2]-0.4134798*Rpsel[,3],
xlab= "log(p_{Apple}) - 0.4134798*log(p_{Amazon})",ylab="r_{Apple} - 0.4134798*r_{Amazon}")
# Q3
curr = read.csv('c4a8681f9469f4a8.csv')
keep = c(1:2865)[!is.na(curr[,2])]
curr2 = curr[keep,]
currnames = c("Date","CNY","DKK","HKD","SGD","CHF","EUR")
colnames(curr2) = currnames
lcurr = log(curr2[,2:7])
dlcurr = apply(lcurr,2,diff)
dlcurr
corr = cor(dlcurr)
corr
hclust(corr)
hclust(dist(dlcurr))
plot(hclust(dist(dlcurr)))
par(mfrow = c(1,1))
corr = cor(dlcurr)
corr
plot(hclust(dist(dlcurr)))
View(lcurr)
dist(dlcurr)
plot(hclust(dist(t(dlcurr))))
corr = cor(dlcurr)
corr
