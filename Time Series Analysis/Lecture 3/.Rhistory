# Q4
avg_stat = c(mean(starwars[`gender`=='male', height]))
# Q4
avg_stat = c(mean(starwars[starwars$gender=='male', height]))
# Q4
avg_stat = c(mean(starwars[starwars$gender=='male', 'height']))
# Q4
avg_stat = c(mean(starwars[starwars$gender=='male', 2]))
starwars$gender=='male'
# Q4
starwars %>% filter(!is.na(gender))
# Q4
starwars %>% filter(!is.na(gender)) %>% group_by(gender) %>% summarise(avg_height = mean(height))
# Q4
starwars %>% filter(!is.na(gender) & gender %in% c('male', 'female')) %>% group_by(gender) %>% summarise(avg_height = mean(height))
# Q4
res = starwars %>%
filter(!is.na(gender) & gender %in% c('male', 'female')) %>%
group_by(gender) %>%
summarise(avg_height = mean(height))
avg_height = as.vector(res$avg_height)
avg_height
# Q5
starwars[height>10]
# Q5
starwars[height>10,]
# Q5
starwars['height'>10,]
# Q5
starwars[homeworld=='Tatooine',]
# Q5
starwars['homeworld'=='Tatooine',]
# Q5
starwars['homeworld'=='Tatooine',]
# Q5
starwars$homeworld=='Tatooine'
# Q5
starwars[starwars$homeworld=='Tatooine']
# Q5
starwars[starwars$homeworld=='Tatooine',]
# Q5
starwars['species'=='Droid',]
# Q5
starwars[species=='Droid',]
# Q5
subset(starwars, homeworld=='Tatooine')
# Q5
subset(starwars, homeworld=='Tatooine' & species=='Droid')
# Q5
nrow(subset(starwars, homeworld=='Tatooine' & species=='Droid'))
# Q6
chewie = subset(starwars, homeworld=='Chewbacca')
View(chewie)
# Q6
hl = subset(starwars, name=='Chewbacca')
chewie = subset(starwars, homeworld==hl$homeworld)
View(chewie)
chewie$BMI = chewie$mass/chewie$height**2
# Q7
spotify_songs = read.table('spotify_songs.txt')
View(spotify_songs)
# Q7
spotify_songs = read.table('spotify_songs.txt', header = TRUE)
# Q8
spotify_songs = subset(spotify_songs, !is.na(track_artisit))
# Q8
spotify_songs = subset(spotify_songs, !is.na(track_artist))
View(spotify_songs)
# Q9
order(spotify_songs$danceability)
# Q9
spotify_songs[order(spotify_songs$danceability),]
# Q9
spotify_songs[order(spotify_songs$danceability, decreasing = TRUE),]
# Q9
head(spotify_songs[order(spotify_songs$danceability, decreasing = TRUE),],1)
# Q10
subset(spotify_songs, danceability>0.6, track_popularity>=70, playlist_genre=='rock')
# Q10
subset(spotify_songs, danceability>0.6 & track_popularity>=70 & playlist_genre=='rock')
# Q10
nrow(subset(spotify_songs, danceability>0.6 & track_popularity>=70 & playlist_genre=='rock'))
# Q11
spotify_songs %>% mutate(
popularityGroup = case_when(
energy <= 0.4 ~ 'low',
energy > 0.4 & energy <= 0.6 ~ 'medium-low',
energy > 0.6 & energy <= 0.8 ~ 'medium-high',
energy > 0.8 ~ 'high'
)
)
# Q11
spotify_songs = spotify_songs %>% mutate(
popularityGroup = case_when(
energy <= 0.4 ~ 'low',
energy > 0.4 & energy <= 0.6 ~ 'medium-low',
energy > 0.6 & energy <= 0.8 ~ 'medium-high',
energy > 0.8 ~ 'high'
)
)
## 2
length(unique(spotify_songs$track_artist))
names(spotify_songs)
## 2
spotify_songs[,c("track_artist", "popularityGroup" )]
## 2
df = spotify_songs[,c("track_artist", "popularityGroup" )]
unique(df)
## 2
table(spotify_songs$popularityGroup)
## 2
n_artists = table(spotify_songs$popularityGroup)
# Q12
spotify_songs$duration_min = spotify_songs$duration_ms/60000
# Q13
spotify_songs[order(spotify_songs$energy),]
# Q13
spotify_songs = spotify_songs[order(spotify_songs$energy),]
model.matrix(y~poly(x, degree = 4, raw = TRUE))
# Q14
y = spotify_songs$danceability
x = spotify_songs$energy
model.matrix(y~poly(x, degree = 4, raw = TRUE))
X = model.matrix(y~poly(x, degree = 4, raw = TRUE))
View(X)
?model.matrix
X = model.matrix(~poly(x, degree = 4, raw = TRUE))
model = lm(y~X)
summary(model)
model = lm(y~0+X)
summary(model)
# Q15
y.hat = model$fitted.values
# Q15
y.hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
View(y.hat)
# Q15
y.hat = as.vector(X %*% solve(t(X) %*% X) %*% t(X) %*% y)
# Q16
reg = list()
reg['A'] = 1
reg
# Q16
reg = list()
reg['data'] = list(x = x, y = y)
reg['data'] = list(x, y)
reg['data'] = list('x' = x, 'y' = y)
reg['data'] = list('x' = x)
reg
reg['data'] = list()
# Q16
reg = list()
reg['data'] = list()
reg['data']['x'] = x
reg[['data']]['x'] = x
reg
reg['data']['x'] = x
reg
# Q16
reg = list()
reg['data'] = list()
reg
# Q16
reg = list()
reg$data = list()
REG
reg
reg$data$x = x
reg$data$y = y
reg
View(reg)
# Q16
reg = list()
reg$data = list(); reg$data$x = x; reg$data$y = y
reg$designM = X
reg$yhat = y.hat
View(reg)
# Q17
duration = data.frame(d_1 = runif(10000, 72080, 513440),
d_2 = runif(10000, 72080, 513440))
duration$d_12avg = (duration$d_1 + duration$d_2)/2
sum(duration$d_12avg > 72080*2)/10000
# Q3
starwars = subset(starwars, !is.na(height) & !is.na(mass))
# Q4
res = subset(starwars, !is.na(gender) & gender %in% c('male', 'female'))
?aggregate
aggregate(res$height, by=res$gener, mean)
aggregate(res$height, by=res$gender, mean)
aggregate(height~gender, data = res)
aggregate(height~gender, data = res, FUN = mean)
# Q11
## 1
spotify_songs = mutate(spotify_songs,
popularityGroup = case_when(
energy <= 0.4 ~ 'low',
energy > 0.4 & energy <= 0.6 ~ 'medium-low',
energy > 0.6 & energy <= 0.8 ~ 'medium-high',
energy > 0.8 ~ 'high'
)
)
setwd("~/Desktop/2021_winter_quarter/Time Series Analysis/Lecture 3")
# q1
## part a
curr = read.csv('c4a8681f9469f4a8.csv')
keep = c(1:2865)[!is.na(curr[,2])]
curr2 = curr[keep,]
currnames = c("Date","CNY","DKK","HKD","SGD","CHF","EUR")
colnames(curr2) = currnames
lcurr = log(curr2[,2:7])
dlcurr = apply(lcurr,2,diff)
for (name in currnames[2:7]) {
y = dlcurr[,name]
x = lcurr[,name][1:2757]
print(paste('-------', name, '-------'))
print(summary(lm(y~x-1)))
}
## part b
par(mfrow = c(2,3))
for (name in currnames[2:7]) {
x = lcurr[,name][1:2757]
ts.plot(x, xlab = 'Time', ylab = name)
}
# q2
## part a
model = lm(DKK~EUR, data = lcurr)
# summary(model)
par(mfrow = c(1,1))
ts.plot(model$residuals, main='time series of residuals from log(spy) ~ log(dax)')
res = model$residuals
summary(lm(diff(res)~res[1:(length(res)-1)]-1))
summary(model)
# q1
## part a
curr = read.csv('c4a8681f9469f4a8.csv')
keep = c(1:2865)[!is.na(curr[,2])]
curr2 = curr[keep,]
currnames = c("Date","CNY","DKK","HKD","SGD","CHF","EUR")
colnames(curr2) = currnames
lcurr = log(curr2[,2:7])
dlcurr = apply(lcurr,2,diff)
for (name in currnames[2:7]) {
y = dlcurr[,name]
x = lcurr[,name][1:2757]
print(paste('-------', name, '-------'))
print(summary(lm(y~x-1)))
}
## part b
par(mfrow = c(2,3))
for (name in currnames[2:7]) {
x = lcurr[,name][1:2757]
ts.plot(x, xlab = 'Time', ylab = name)
}
# q2
## part a
model = lm(DKK~EUR, data = lcurr)
summary(model)
par(mfrow = c(1,1))
ts.plot(model$residuals, main='time series of residuals from log(spy) ~ log(dax)')
res = model$residuals
summary(lm(diff(res)~res[1:(length(res)-1)]-1))
## part b
port = lcurr$DKK-0.997*lcurr$EUR
port
c1 = mean(port)
c2 = 1.5*sqrt(var(port))
c2
c1
View(curr)
View(curr2)
View(lcurr)
df = lcurr[,c('DKK','EUR')]
View(df)
?if
?if
### basic
count = 0
for(i in 1:10){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= c1+c2){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
} else if (port <= c1-c2) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
}
}
n1
## part b
port = lcurr$DKK-0.997*lcurr$EUR
c1 = mean(port)
c2 = 1.5*sqrt(var(port))
n1 = n2 = 0
df = lcurr[,c('DKK','EUR')]
### basic
count = 0
for(i in 1:10){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= c1+c2){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
} else if (port <= c1-c2) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
}
}
port
for(i in 1:100){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= c1+c2){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
} else if (port <= c1-c2) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
}
}
for(i in 1:100){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
#   if(port >= c1+c2){
#     n1 = n1 - 1/exp(dkk)
#     n2 = n2 + 0.997/exp(eur)
#     count = count + 1
#   } else if (port <= c1-c2) {
#     n1 = n1 + 1/exp(dkk)
#     n2 = n2 - 0.997/exp(eur)
#     count = count + 1
#   }
# }
print(port >= c1+c2)
print(port <= c1-c2)
}
for(i in 1:100){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
#   if(port >= c1+c2){
#     n1 = n1 - 1/exp(dkk)
#     n2 = n2 + 0.997/exp(eur)
#     count = count + 1
#   } else if (port <= c1-c2) {
#     n1 = n1 + 1/exp(dkk)
#     n2 = n2 - 0.997/exp(eur)
#     count = count + 1
#   }
# }
# print(port >= c1+c2)
# print(port <= c1-c2)
print(port)
}
c1+c2
for(i in 1:2000){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
#   if(port >= c1+c2){
#     n1 = n1 - 1/exp(dkk)
#     n2 = n2 + 0.997/exp(eur)
#     count = count + 1
#   } else if (port <= c1-c2) {
#     n1 = n1 + 1/exp(dkk)
#     n2 = n2 - 0.997/exp(eur)
#     count = count + 1
#   }
# }
print(port >= c1+c2)
# print(port <= c1-c2)
# print(port)
}
## part b
port = lcurr$DKK-0.997*lcurr$EUR
c1 = mean(port)
c2 = 1.5*sqrt(var(port))
n1 = n2 = 0
df = lcurr[,c('DKK','EUR')]
### basic
count = 0
for(i in 1:2000){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= c1+c2){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
} else if (port <= c1-c2) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
}
# print(port >= c1+c2)
# print(port <= c1-c2)
# print(port)
}
n1*exp(df[2758,1])+n2*exp(df[2758,2])-0.02*count
### reinforcement
n1 = n2 = 0
count = 0
for(i in 1:2758){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= c1+c2){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
} else if (port <= c1-c2) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
}
}
n1*exp(df[2758,1])+n2*exp(df[2758,2])-0.02*count
### basic
n1 = n2 = 0
count = 0
status = NULL
for(i in 1:2758){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= c1+c2 & status %in% c(NULL, 0)){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
status = 1
} else if (port <= c1-c2 & status %in% c(NULL, 1)) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
status = 0
}
}
n1*exp(df[2758,1])+n2*exp(df[2758,2])-0.02*count
### basic
n1 = n2 = 0
count = 0
status = NULL
for(i in 1:2758){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if((port >= c1+c2) & (status %in% c(NULL, 0))){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
status = 1
} else if ((port <= c1-c2) & (status %in% c(NULL, 1))) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
status = 0
}
}
n1*exp(df[2758,1])+n2*exp(df[2758,2])-0.02*count
status %in% c(NULL, 0)
(status==0 | is.null(status))
is.null(status)
status==0
### basic
n1 = n2 = 0
count = 0
status = -1
for(i in 1:2758){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if((port >= c1+c2) & (status==0 | status==-1)){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
status = 1
} else if ((port <= c1-c2) & (status==1 | status==-1)) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
status = 0
}
}
n1*exp(df[2758,1])+n2*exp(df[2758,2])-0.02*count
### reinforcement
n1 = n2 = 0
count = 0
for(i in 1:2758){
dkk = df[i,1]
eur = df[i,2]
port = dkk-0.997*eur
if(port >= (c1+c2)){
n1 = n1 - 1/exp(dkk)
n2 = n2 + 0.997/exp(eur)
count = count + 1
} else if (port <= (c1-c2)) {
n1 = n1 + 1/exp(dkk)
n2 = n2 - 0.997/exp(eur)
count = count + 1
}
}
n1*exp(df[2758,1])+n2*exp(df[2758,2])-0.02*count
